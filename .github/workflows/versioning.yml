name: Versioning

on:
  push:
    branches:
      - "main"
  workflow_call:
    inputs:
      branch:
        description: 'The branch where the versioning will be executed'
        type: string
        required: false
        default: 'main'
      majorList:
        description: 'List of the nouns that will be considered as major version'
        type: string
        required: false
        default: 'BREAKING CHANGE, BREAKING, MAJOR'
      minorList:
        description: 'List of the nouns that will be considered as minor version'
        type: string
        required: false
        default: 'FEATURE, Feature, feature, FEAT, Feat, feat'
      patchList:
        description: 'List of the nouns that will be considered as patch version'
        type: string
        required: false
        default: 'FIX, Fix, fix, FIXED, Fixed, fixed, Refactor, Refact, Refac, refac, refact, refactor, REFAC, REFACT, REFACTOR, refacs, refacts, refactors, REFACS, REFACTS, REFACTORS, config, conf, configs, confs, cofiguration, cofigurations, configure, doc, docs, docu, document, documentation, dependencies, dependencie, depends, depend, deps, dep, chore, build, rebuild, build(deps), build(deps-dev), ci, CI, test, tests, testing, wip, WIP, Wip'
      release-artifacts:
        description: 'Boolean flag. False by default. Should create a release with the artifacts.'
        type: boolean
        required: false
        default: false
      artifacts-name:
        description: 'The artifacts name to be downloaded. It must be the same name used in the upload artifacts action. If not informed, all artifacts for the run will be downloaded.'
        type: string
        required: false
        default: ''
    secrets:
      github-token:
        description: 'The Github token'
        required: true

env:
  GH_TOKEN: ${{ secrets.github-token || secrets.GITHUB_TOKEN }}

jobs:
  versioning:
    name: Versioning
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      statuses: write
    outputs:
      version: ${{ steps.semver.outputs.next }}
    steps:
      - name: Set up repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get next version
        id: semver
        uses: ietf-tools/semver-action@v1
        with:
          token: ${{ secrets.github-token || secrets.GITHUB_TOKEN }}
          branch: ${{ github.event.inputs.branch || 'main' }}
          majorList: ${{ github.event.inputs.majorList || 'BREAKING CHANGE, BREAKING, MAJOR' }}
          minorList: ${{ github.event.inputs.minorList || 'FEATURE, Feature, feature, FEAT, Feat, feat' }}
          patchList: ${{ github.event.inputs.patchList || 'FIX, Fix, fix, FIXED, Fixed, fixed, Refactor, Refact, Refac, refac, refact, refactor, REFAC, REFACT, REFACTOR, refacs, refacts, refactors, REFACS, REFACTS, REFACTORS, config, conf, configs, confs, cofiguration, cofigurations, configure, doc, docs, docu, document, documentation, dependencies, dependencie, depends, depend, deps, dep, chore, build, rebuild, build(deps), build(deps-dev), ci, CI, test, tests, testing, wip, WIP, Wip' }}
          patchAll: false

      - name: Push tags
        id: push-tags
        run: |
          #!/bin/sh
          # Get minor tag
          minor=$(echo ${{ steps.semver.outputs.next }} | sed 's/.[0-9]\{1,\}$//')
          # Get major tag
          major=$(echo ${{ steps.semver.outputs.next }} | sed 's/.[0-9]\{1,\}.[0-9]\{1,\}$//')

          # Set new tags and force update
          git tag ${{ steps.semver.outputs.next }}
          git tag --force $minor
          git tag --force $major

          # Push new tag forcing the update of the minor and major tag
          git push --tag --force

      - name: Download artifacts
        id: download-artifacts
        if: inputs.release-artifacts == true
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.github-token || secrets.GITHUB_TOKEN }}
          name: ${{ inputs.artifacts-name || '' }}
          path: './artifacts'
      
      - name: Create Release
        id: create-release
        env:
          GH_TOKEN: ${{ secrets.github-token || secrets.GH_PROJECT_AUTOMATION || secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/sh

          if [ "${{ github.event.head_commit.committer.username }}" = "web-flow" ]; then
            echo "::warning ::There were no pull requests associated with the commits included in this release. Automatically-generated notes were not generated."
          fi
  
          # The last commit was committed by GitHub.
          # We assume that the push event come of the a potential pull-request.
          if [ "${{ inputs.release-artifacts || false }}" = "true" ]; then
            gh release create ${{ steps.semver.outputs.next }} \
            --title 'Release ${{ steps.semver.outputs.next }}' \
            --notes "Changelog Contents :sunglasses:" \
            --generate-notes \
            $(find ./artifacts -maxdepth 1 -type f -print0 | xargs -0 echo)
          else
            gh release create ${{ steps.semver.outputs.next }} \
            --title 'Release ${{ steps.semver.outputs.next }}' \
            --notes "Changelog Contents :sunglasses:" \
            --generate-notes
          fi
